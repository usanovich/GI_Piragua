lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
#data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
#data2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(muestra = mean(muestra))
}
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
municipios = estaciones_pluvio[i,4],
ubicación = estaciones_pluvio[i,11])
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
View(lluvia)
#Agrupamos por municipios y hallamos su acumulado para la temporalidad dada
lluvia2 = lluvia %>%
group_by(municipios, ubicación) %>%
dplyr::summarise(muestra = sum(muestra))
View(lluvia2)
comenzar = "2020-12-20"
finalizar = "2020-12-27"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
# Filtramos por territoriales (cambiar territorial en filter):
# territorial == "XXXX"
estaciones_pluvio = estaciones %>%
filter(tipo == "Pluviógrafo",
municipio == "Girardota")
#Creamos categorías únicas para municipios
estaciones_pluvio$municipio = make.names(estaciones_pluvio[,4], unique = TRUE)
get_data = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/precipitacion/40?date_estacion__gte=2020-11-17&date_estacion__lt=2020-11-23&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("40", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
#data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
#data2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(muestra = mean(muestra))
}
get_lluvia = function() {
lluvia = list()
# Guardamos en lista de listas todos los datasets de las estaciones
# para una territorial en particular
for (i in 1:nrow(estaciones_pluvio)) {
estacion = estaciones_pluvio$codigo[i]
lluvia[[i]] = get_data(estacion, comenzar, finalizar)
}
# Agregamos una columna de municipios a cada dataframe de la lista
for (i in 1:length(lluvia)) {
if (nrow(lluvia[[i]]) > 0) {
lluvia[[i]] = data.frame(lluvia[[i]],
municipios = estaciones_pluvio[i,4],
ubicación = estaciones_pluvio[i,11])
}
}
#Para eliminar listas con 0 filas
lluvia = lluvia[sapply(lluvia, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
lluvia = do.call(rbind, lluvia)
}
lluvia = get_lluvia()
#Agrupamos por municipios y hallamos su acumulado para la temporalidad dada
lluvia2 = lluvia %>%
group_by(municipios, ubicación) %>%
dplyr::summarise(muestra = sum(muestra))
View(lluvia2)
install.packages("shinycssloaders")
library(dplyr)
library(shinycssloaders)
shiny::runApp('Descargas/Shiny_app')
install.packages("shinybusy")
library(shinybusy)
runApp('Descargas/Shiny_app')
runApp()
runApp()
runApp('Descargas/Shiny_app')
setwd("~/Descargas/Shiny_app")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
library(ggplot2)
library(plotly)
library(plyr)
comenzar <-  "2011-01-01"
finalizar <-  "2021-01-17"
estaciones <-  read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones_limni <-  estaciones %>%
filter(tipo == "Limnígrafo")
comenzar = "2010-01-01"
finalizar = "2021-01-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones_limni = estaciones %>%
filter(tipo == "Limnígrafo")
estaciones$muniCodi = as.character(paste(estaciones$municipio, estaciones$codigo))
View(estaciones)
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data$fechas = floor_date(data$fechas, "5 mins")
data2 = data %>%
group_by(fechas) %>%
dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
setwd("~/Descargas")
# Limpiamos el global enviroment
rm(list = ls())
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
comenzar = "2010-01-01"
finalizar = "2021-01-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones$muniCodi = as.character(paste(estaciones$municipio, estaciones$codigo))
estaciones_limni = estaciones %>%
filter(tipo == "Limnígrafo")
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
#data2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
for (i in 1:length(limni)) {
if (nrow(limni[[i]]) > 0) {
limni[[i]] = data.frame(limni[[i]], municipios = estaciones_limni[i,4],
muniCodi = estaciones_limni[i,17])
}
}
View(limni)
limni[[1]]
for (i in 1:length(limni)) {
if (nrow(limni[[i]]) > 0) {
limni[[i]] = data.frame(limni[[i]], municipios = estaciones_limni[i,4],
muniCodi = estaciones_limni[i,17])
}
}
length(limni)
nrow(limni[[i]])
nrow(limni[[1]])
nrow(limni[[2]])
nrow(limni[[3]])
limni[[i,1]]
limni[1]
limni[1,2]
limni[,1]
limni[1,]
limni = list() # Creamos una lista vacía
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
limnidata2 = data %>%
group_by(fechas) %>%
dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones$muniCodi = as.character(paste(estaciones$municipio, estaciones$codigo))
estaciones_limni = estaciones %>%
filter(tipo == "Limnígrafo", territorial == "Aburrá Norte")
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
#limnidata2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
for (i in 1:length(limni)) {
if (nrow(limni[[i]]) > 0) {
limni[[i]] = data.frame(limni[[i]], municipios = estaciones_limni[i,4],
muniCodi = estaciones_limni[i,17])
}
}
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
limnidata2 = data %>%
group_by(fechas) %>%
dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
limni[[1]]
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
limni[[1]]
for (i in 1:length(limni)) {
if (nrow(limni[[i]]) > 0) {
limni[[i]] = data.frame(limni[[i]], municipios = estaciones_limni[i,4],
muniCodi = estaciones_limni[i,17])
}
}
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
#data$fechas = floor_date(data$fechas, "5 mins")
#limnidata2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
limni[[1]]
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
#data$fechas = floor_date(data$fechas, "5 mins")
#limnidata2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data2 = data
#data$fechas = floor_date(data$fechas, "5 mins")
#limnidata2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
limni[[1]]
for (i in 1:length(limni)) {
if (nrow(limni[[i]]) > 0) {
limni[[i]] = data.frame(limni[[i]], municipios = estaciones_limni[i,4],
muniCodi = estaciones_limni[i,17])
}
}
#Para eliminar listas con 0 filas
limni = limni[sapply(limni, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
limni = do.call(rbind, limni)
View(limni)
View(limni)
View(limni)
limni[c(1,2)]
runApp('Shiny_app')
setwd("~/Descargas/Shiny_app")
deployApp()
runApp()
deployApp()
runApp()
deployApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
deployApp()
runApp()
install.packages("rmdformats")
library(knitr)
library(rmdformats)
library(tidyverse)
library(urltools)
library(lubridate)
library(dplyr)
library(DT)
options(timeout=500)
options(scipen=999)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
comenzar = "2021-01-01"
finalizar = "2021-01-17"
estaciones = read.csv("http://www.piraguacorantioquia.com.co/redes_nuevo/images/Estaciones_Piragua.csv")
estaciones$muniCodi = as.character(paste(estaciones$municipio, estaciones$codigo))
estaciones_limni = estaciones %>%
filter(tipo == "Limnígrafo")
get_data_limni = function(estacion, inicio, final){
url="https://www.piraguacorantioquia.com.co/api/nivel/1017?date_estacion__gte=2020-01-01&date_estacion__lt=2020-01-02&downloadfile"
url2 = param_set(url, "date_estacion__gte", inicio)
url3 = param_set(url2, "date_estacion__lt", final)
data = read.csv(gsub("1017", estacion, url3))
data = na.omit(data)
data = data[!(data$fechas == ""), ] # Para borrar campos de fechas vacíos
data$fechas = as.POSIXct(data$fechas, "%Y-%m-%d %H-%M")
data2 = data
#data$fechas = floor_date(data$fechas, "5 mins")
#limnidata2 = data %>%
#group_by(fechas) %>%
#dplyr::summarise(nivel = mean(nivel)) #Cambiar muestra, nivel o caudal
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
View(estaciones)
View(limni)
View(estaciones)
#Para eliminar listas con 0 filas
limni = limni[sapply(limni, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
limni = do.call(rbind, limni)
limni = limni[c(1,3,5,6,7,8)]
View(limni)
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
limni = list() # Creamos una lista vacía
for (i in 1:nrow(estaciones_limni)) {
estacion = estaciones_limni$codigo[i]
limni[[i]] = get_data_limni(estacion, comenzar, finalizar)
}
for (i in 1:length(limni)) {
if (nrow(limni[[i]]) > 0) {
limni[[i]] = data.frame(limni[[i]],
territorial = estaciones_limni[i,5],
municipios = estaciones_limni[i,4],
muniCodi = estaciones_limni[i,17],
fuente = estaciones_limni[i,7])
}
}
#Para eliminar listas con 0 filas
limni = limni[sapply(limni, nrow) > 0]
#Creamos un dataframe global con la lista de estaciones que tienen datos
limni = do.call(rbind, limni)
limni = limni[c(1,3,5,6,7,8)]
View(limni)
View(limni)
#Agrupamos por municipios y hallamos su promedio
limni_prom = limni %>%
group_by(territorial, municipios, muniCodi, fuente) %>%
dplyr::summarise(medio = mean(nivel)) # Nivel, caudal o muestra
View(limni_prom)
View(limni_prom)
#Agrupamos por municipios y hallamos su máximo
limni_max = limni %>%
group_by(territorial, municipios, muniCodi, fuente) %>%
dplyr::summarise(máximo = max(nivel)) # Nivel, caudal o muestra
#Agrupamos por municipios y hallamos su mínimo
limni_min = limni %>%
group_by(territorial, municipios, muniCodi, fuente) %>%
dplyr::summarise(mínimo = min(nivel)) # Nivel, caudal o muestra
# Creamos dataset con resumen
limni_resumen = data.frame(limni_prom, limni_max$máximo,
limni_min$mínimo)
View(limni_resumen)
View(limni_resumen)
View(limni_resumen)
limni_resumen <- limni_resumen[c(1,3,4,5,6,7)]
colnames(limni_resumen) = c("Territorial", "Estación", "Fuente",
"Promedio",
"Máximo", "Mínimo")
View(limni_resumen)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
?skim()
library(skim)
library(skimr)
?skim()
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
K
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
unlink('~/Descargas/Info_mark/Inf_RA_cache', recursive = TRUE)
